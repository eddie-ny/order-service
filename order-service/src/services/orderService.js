// src/services/orderService.js

const express = require('express');
const axios = require('axios');
const { Pool } = require('pg');
require('dotenv').config();

// Importing controller for creating orders
const orderController = require('../controllers/orderController'); // Adjust path as needed

const app = express();
const PORT = 5003;

// Middleware to parse JSON in the request body
app.use(express.json());

// URL of the Product Service (make sure it's correct based on your setup)
const PRODUCT_SERVICE_URL = 'http://localhost:3000/products'; // Updated to match your product service URL

// Function to update product inventory by calling the product service
const updateProductInventory = async (productId, quantity) => {
    try {
        const response = await axios.put(`${PRODUCT_SERVICE_URL}/${productId}/inventory`, {
            quantity
        });
        return response.data;
    } catch (error) {
        if (error.response && error.response.status === 404) {
            throw new Error('Product not found in inventory');
        }
        console.error('Error updating product inventory:', error);
        throw new Error('Error updating product inventory');
    }
};

// PostgreSQL pool configuration
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'multi_vendor_platform',
  password: 'edward', // Directly define the password as a string
  port: 5432,
});

// Function to place an order
const placeOrder = async (orderDetails) => {
    const { productId, userId, quantity, price } = orderDetails; // Ensure this matches the request body
    const totalPrice = quantity * price; // Calculate total price

    // Insert order without order_id as it's auto-generated by PostgreSQL
    const query = `
        INSERT INTO orders (product_id, user_id, quantity, price, total_price, status)
        VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`;
    const values = [productId, userId, quantity, price, totalPrice, 'Pending'];

    try {
        const orderResult = await pool.query(query, values);
        const savedOrder = orderResult.rows[0];

        await updateProductInventory(productId, quantity);

        return savedOrder;
    } catch (error) {
        console.error('Error placing order:', error);
        throw error;
    }
};

// Function to get order details by ID
const getOrderById = async (orderId) => {
    const query = 'SELECT * FROM orders WHERE order_id = $1';
    try {
        const result = await pool.query(query, [orderId]);
        return result.rows[0]; // Return the order details
    } catch (error) {
        console.error('Error fetching order:', error);
        throw error;
    }
};

// Function to get all orders (can be used for admin or user to view orders)
const getAllOrders = async () => {
    const query = 'SELECT * FROM orders';
    try {
        const result = await pool.query(query);
        return result.rows; // Return all orders
    } catch (error) {
        console.error('Error fetching orders:', error);
        throw error;
    }
};

// Function to update the status of an order (for example: from 'Pending' to 'Confirmed')
const updateOrderStatus = async (orderId, status) => {
    const query = 'UPDATE orders SET status = $1 WHERE order_id = $2 RETURNING *';
    const values = [status, orderId];
    try {
        const result = await pool.query(query, values);
        return result.rows[0]; // Return the updated order
    } catch (error) {
        console.error('Error updating order status:', error);
        throw error;
    }
};

// Controller to handle order creation requests
const createOrder = async (req, res) => {
    const { productId, userId, quantity, price } = req.body;

    if (!productId || !userId || !quantity || !price) {
        return res.status(400).json({ error: 'Missing required fields' });
    }

    try {
        const orderDetails = await placeOrder({ productId, userId, quantity, price });
        res.status(201).json(orderDetails);
    } catch (error) {
        console.error('Error placing order:', error);
        res.status(500).json({ error: 'Error placing order' });
    }
};

app.post('/orders', createOrder);

app.listen(PORT, () => {
    console.log(`Order service running on port ${PORT}`);
});

// Export all the functions for use in controllers
module.exports = {
    placeOrder,
    getOrderById,
    getAllOrders,
    updateOrderStatus,
    createOrder
};
